- include_vars: common-vars.yml.vault
  tags: 
    - fast
    - ssh

- name: Check that the current machine is a Fedora 22
  assert: { that: "ansible_distribution == 'Fedora' and ansible_distribution_version == '22'" }

###############################################################################################
# Work part
#
- name: at work ?
  shell: "ping -c1 -i 0.2 {{ pingued.host }}"
  register: i_am_at_work
  ignore_errors: yes
  changed_when: false
  tags: fast

- name: check if I'm at work
  set_fact: at_work={{ true if i_am_at_work.rc == 0 else false }}
  tags: fast

- debug: var=at_work

- include_vars: work-vars.yml.vault
  when: at_work == true
  tags: fast

###############################################################################################
# dnf configuration
#
- name: add dnf conf file
  template: src=dnf.conf owner=root group=root dest=/etc/dnf/dnf.conf mode=644
  tags: fast
  sudo: yes

###############################################################################################
# install packages
#
- { include: get-and-cache.yml, toget: "http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-22.noarch.rpm" }

- name: Install RPMFusion free repository
  sudo: yes
  dnf: name="{{ cached }}" state=present
  tags: rpmfusion

- { include: get-and-cache.yml, toget: "http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-22.noarch.rpm" }

- name: Install RPMFusion non-free repository
  sudo: yes
  dnf: name="{{ cached }}" state=present
  tags: rpmfusion

- name: install packages
  sudo: yes
  dnf: name={{ item }} state=present
  with_items:
   - zsh
   - git
   - git-svn
   - git-gui
   - tig
   - subversion
   - tree
   - unzip
   - vagrant
   - vagrant-libvirt
   - VirtualBox
   - kernel-devel
   - golang
   - java-1.8.0-openjdk-devel
   - groovy
   - ntpdate
   - rubygem-asciidoctor
   - tmux
   - tmuxinator
   - keepass
   - gimp
   - baobab
   - vlc
   - powerline
   - tmux-powerline
   - vim-powerline

###############################################################################################
# Docker
#
- include: docker.yml

###############################################################################################
# ssh configuration
#
- include_vars: sshconfig.yml.vault
  tags: ssh

- name: remove current ssh config file
  file:
      path="{{ user.home }}/.ssh/config"
      state=absent
  changed_when: false
  tags: ssh

- name: generate ~/.ssh/config
  lineinfile:
      dest="{{ user.home }}/.ssh/config"
      line="{{ item.value }}"
      state=present
      insertafter=EOF
      create=yes
      owner="{{ user.name }}"
      group="{{ user.name }}"
      mode=0700
  with_dict: sshconfig.hosts
  changed_when: false
  tags: ssh

###############################################################################################
# tools settings
#
- name: Set Git autosquash true globally (todo => idempotentize)
  shell: git config --global rebase.autosquash true
  changed_when: false

- name: configure git
  shell: >
     git config --global user.email '{{ user.email }}' &&
     git config --global user.name '{{ user.fullName }}'
  changed_when: false
  tags: fast

- name: set default shell to zsh
  sudo: yes
  user: name={{ user.name }} shell=/usr/bin/zsh state=present

- name: install oh-my-zsh
  git: repo=https://github.com/robbyrussell/oh-my-zsh dest={{ user.home }}/.oh-my-zsh

- name: clone fzf repository
  git: repo=https://github.com/junegunn/fzf.git dest={{ user.home }}/.fzf

- name: install fzf
  shell: "{{ user.home }}/.fzf/install --all"
  changed_when: false

- name: add fzf zsh config file
  template: src=fzf.zsh owner={{ user.name }} group={{ user.name }} dest={{ user.home }}/.fzf.zsh mode=644

- name: add zshrc file
  template: src=zshrc owner={{ user.name }} group={{ user.name }} dest={{ user.home }}/.zshrc mode=644
  tags: fast

- name: add tmux config file (powerline)
  template: src=tmux.conf owner={{ user.name }} group={{ user.name }} dest={{ user.home }}/.tmux.conf mode=644
  tags: fast

- name: add tmuxinator-completion file for zsh
  copy: src=tmuxinator-completion.zsh owner={{ user.name }} group={{ user.name }} dest={{ user.home }}/.tmuxinator-completion.zsh mode=644

- name: create tmuxinator config directories
  file: path={{ user.home }}/.tmuxinator owner={{ user.name }} group={{ user.name }} state=directory
  tags: fast

- name: add tmuxinator config file
  template: src=tmuxinator/work.yml owner={{ user.name }} group={{ user.name }} dest={{ user.home }}/.tmuxinator/work.yml
  tags: fast

- name: add vimrc file
  template: src=vimrc owner={{ user.name }} group={{ user.name }} dest={{ user.home }}/.vimrc mode=644

- { include: get-and-cache.yml, toget: "http://c758482.r82.cf2.rackcdn.com/sublime_text_3_build_3083_x64.tar.bz2" }

- name: Uncompress Sublime under the tools directory
  unarchive: src="{{ cached }}" dest="{{ tools.path }}" creates={{ tools.path }}/sublime_text_3

- name: create SublimeText3 user config folder
  file:
    path="{{ user.home }}/.config/sublime-text-3/Packages/User/"
    state=directory

- name: SublimeText3 configuration
  template: src=sublime-text-eclipse-style owner={{ user.name }} group={{ user.name }} dest="{{ user.home }}/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap" mode=664

- name: Settings SublimeText Package Control Plugin
  template:
    src=templates/PackageControl.sublime-settings
    dest="{{ user.home }}/.config/sublime-text-3/Packages/User/Package Control.sublime-settings"
  tags: fast

- { include: get-and-cache.yml, toget: "http://atom.io/download/rpm" }

- name: Install Atom Text Editor
  sudo: yes
  dnf: name="{{ cached }}" state=present
  tags: atom

- name: create Atom user config folder
  file:
    path="{{ user.home }}/.atom/"
    state=directory

- name: Install Atom Asciidoctor Preview package
  shell: apm install asciidoc-preview
  changed_when: false

- name: Install Atom Asciidoctor Eclipse Keybindings package
  shell: apm install eclipse-keybindings
  changed_when: false

###############################################################################################
# VirtualBox
#

# Installing the typical 'kmod-VirtualBox' package through dnf won't work because it has to be
# aligned/republished with the latest kernel and it rarely is.
- name: Configure kernel module for VirtualBox
  sudo: yes
  shell:  'akmods --kernel $( uname -r )'
  changed_when: false
  tags: VirtualBox

- name: Configure kernel module for VirtualBox
  sudo: yes
  shell: systemctl restart systemd-modules-load.service
  changed_when: false
  tags: VirtualBox
